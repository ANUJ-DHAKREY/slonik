{
  "author": {
    "email": "gajus@gajus.com",
    "name": "Gajus Kuizinas",
    "url": "http://gajus.com"
  },
  "ava": {
    "babel": {
      "compileAsTests": [
        "test/helpers/**/*"
      ]
    },
    "files": [
      "test/slonik/**/*"
    ],
    "require": [
      "@babel/register"
    ],
    "timeout": "30s"
  },
  "dependencies": {
    "concat-stream": "^2.0.0",
    "delay": "^4.4.0",
    "es6-error": "^4.1.1",
    "get-stack-trace": "^2.0.3",
    "inline-loops.macro": "^1.2.2",
    "is-plain-object": "^5.0.0",
    "iso8601-duration": "^1.2.0",
    "pg": "^8.4.1",
    "pg-connection-string": "^2.4.0",
    "pg-copy-streams": "^5.1.1",
    "pg-copy-streams-binary": "^2.0.1",
    "pg-cursor": "^2.4.1",
    "pg-types": "^3.0.1",
    "postgres-array": "^2.0.0",
    "postgres-interval": "^2.1.0",
    "roarr": "^2.15.4",
    "serialize-error": "^7.0.1",
    "through2": "^4.0.2",
    "ulid": "^2.3.0"
  },
  "description": "A PostgreSQL client with strict types, detailed logging and assertions.",
  "devDependencies": {
    "@ava/babel": "^1.0.1",
    "@babel/cli": "^7.11.6",
    "@babel/core": "^7.11.6",
    "@babel/plugin-transform-flow-strip-types": "^7.10.4",
    "@babel/preset-env": "^7.11.5",
    "@babel/register": "^7.11.5",
    "@typescript-eslint/eslint-plugin": "2.26.0",
    "@typescript-eslint/parser": "2.26.0",
    "ava": "^3.13.0",
    "babel-plugin-istanbul": "^6.0.0",
    "babel-plugin-macros": "^2.8.0",
    "babel-plugin-transform-export-default-name": "^2.0.4",
    "coveralls": "^3.1.0",
    "eslint": "^7.11.0",
    "eslint-config-canonical": "^24.1.1",
    "flow-bin": "^0.135.0",
    "flow-copy-source": "^2.0.9",
    "gitdown": "^3.1.3",
    "husky": "^4.3.0",
    "nyc": "^15.1.0",
    "semantic-release": "^17.2.1",
    "sinon": "^9.2.0",
    "typescript": "^4.0.3"
  },
  "engines": {
    "node": ">=10.0"
  },
  "husky": {
    "hooks": {
      "pre-commit": "npm run lint && npm run test && npm run build",
      "pre-push": "gitdown ./.README/README.md --output-file ./README.md --check"
    }
  },
  "keywords": [
    "postgresql",
    "promise",
    "types"
  ],
  "license": "BSD-3-Clause",
  "main": "./dist/index.js",
  "name": "slonik",
  "nyc": {
    "all": true,
    "exclude": [
      "src/bin",
      "src/queries/*.js"
    ],
    "include": [
      "src/**/*.js"
    ],
    "instrument": false,
    "reporter": [
      "html",
      "text-summary"
    ],
    "require": [
      "@babel/register"
    ],
    "silent": true,
    "sourceMap": false
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gajus/slonik"
  },
  "scripts": {
    "preconvert": "git diff --exit-code && npm run import-type-annotate",
    "convert": "npm run flow-to-ts",
    "postconvert": "npm run import-type-unannotate && npm run addbreaks && (eslint src test --ext .ts --fix || echo meh) && npx prettier '{src,test}/**/*.ts' --write && npm run removebreaks && npm run fix-spaces",
    "flow-to-ts": "flow-to-ts 'src/**/*.js' --write --delete-source --inline-utility-types",
    "addbreaks": "npm run addbreaks-export && npm run addbreaks-import",
    "addbreaks-export": "find src test -type f -name '*.ts' -exec sed -i 's~export {~export { //breakme\\n~g' {} \\;",
    "addbreaks-import": "find src test -type f -name '*.ts' -exec sed -i 's~import {~import { //breakme\\n~g' {} \\;",
    "import-type-annotate": "find src test -type f -name '*.js' -exec sed -i 's~import type {~import type {\\n//import_type~g' {} \\;",
    "import-type-unannotate": "find src test -type f -name '*.ts' -exec sed -i 's~import { //import_type~import type { //breakme~g' {} \\;",
    "fix-spaces": "find src test -type f -name '*.ts' -exec sed -i 's~ constructor~ constructor ~g' {} \\;",
    "removebreaks": "find src test -type f -name '*.ts' -exec sh -c 'A=$(cat {} | grep -v breakme) && echo \"// @flow\n\n$A\" > {}' \\;",
    "type-check": "tsc -p .",
    "compile": "tsc -p tsconfig.lib.json",
    "build": "rm -fr ./dist && NODE_ENV=production babel ./src --out-dir ./dist --copy-files --source-maps && flow-copy-source src dist",
    "create-readme": "gitdown ./.README/README.md --output-file ./README.md",
    "lint": "eslint ./src ./test && flow",
    "test": "NODE_ENV=test nyc ava --verbose"
  },
  "version": "5.0.0"
}
